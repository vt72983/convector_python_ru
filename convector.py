import os

ключевые_слова = {
    'and': 'и',
    'as': 'как',
    'assert': 'утверждать',
    'async': 'асинхронный',
    'await': 'ожидать',
    'break': 'прервать',
    'class': 'класс',
    'continue': 'продолжить',
    'try': 'попробовать',
    'exit': 'выйти',
    'except': 'кроме',
    'return': 'возврат',
    'else': 'иначе',
    'elif': 'иначе_если',
    'if': 'если',
    'for': 'для',
    'while': 'пока',
    'yield': 'возвращать',
    'True': 'истина',
    'False': 'ложь',
    'None': 'ничто',
    'input': 'ввод',
    'print': 'печать',
    'range': 'диапазон',
    'self': 'сам',
    'super': 'суперкласс',
    'in': 'в_',
    'raise': 'исключение',
    'from': 'с_импорт',
    'import': 'импорт',
    'finally': 'финально',
    'as': 'с_имя',
    'global': 'глобальный',
    'not': 'не',
    'or': 'или',
    'pass': 'пропустить',
    'del': 'удалить',
    'lambda': 'лямбда'
}

встроенные_функции = {
    'abs': 'абс',
    'all': 'все',
    'any': 'любой',
    'ascii': 'аски',
    'bin': 'двоичное',
    'bool': 'логическое',
    'breakpoint': 'контрольная_точка',
    'bytearray': 'байтовый_массив',
    'bytes': 'байты',
    'callable': 'вызываемый',
    'chr': 'символ',
    'classmethod': 'метод_класса',
    'compile': 'компилировать',
    'complex': 'комплексное',
    'delattr': 'удалить_атрибут',
    'dict': 'словарь',
    'dir': 'директорий',
    'divmod': 'делить_модуль',
    'enumerate': 'перечислить',
    'eval': 'оценить',
    'exec': 'выполнить',
    'filter': 'фильтр',
    'float': 'вещественное',
    'format': 'формат',
    'frozenset': 'неизменное_множество',
    'getattr': 'получить_атрибут',
    'globals': 'глобальные',
    'hasattr': 'имеет_атрибут',
    'hash': 'хэш',
    'help': 'помощь',
    'hex': 'шестнадцатеричное',
    'id': 'идентификатор',
    'input': 'ввод',
    'int': 'целое',
    'isinstance': 'является_экземпляром',
    'issubclass': 'является_подклассом',
    'iter': 'итератор',
    'len': 'длина',
    'list': 'список',
    'locals': 'локальные',
    'map': 'карта',
    'max': 'максимум',
    'memoryview': 'представление_памяти',
    'min': 'минимум',
    'next': 'следующий',
    'object': 'объект',
    'oct': 'восьмеричное',
    'open': 'открыть',
    'ord': 'порядковый',
    'pow': 'степень',
    'print': 'печать',
    'property': 'свойство',
    'range': 'диапазон',
    'repr': 'представление',
    'reversed': 'обратный',
    'round': 'округлить',
    'set': 'множество',
    'setattr': 'установить_атрибут',
    'slice': 'срез',
    'sorted': 'сортировать',
    'staticmethod': 'статический_метод',
    'str': 'строка',
    'sum': 'сумма',
    'super': 'суперкласс',
    'tuple': 'кортеж',
    'type': 'тип',
    'vars': 'переменные',
    'zip': 'упаковать',
    'import': 'импортировать'
}

def конвертировать_код(код):
    for английское, русское in ключевые_слова.items():
        код = код.replace(английское, русское)
    for английское, русское in встроенные_функции.items():
        код = код.replace(английское, русское)
    return код

def добавить_библиотеку(файл):
    with open(файл, 'r', encoding='utf-8') as f:
        содержимое = f.read()
    
    if 'from ru_python import выполнить_код' not in содержимое:
        содержимое = 'from ru_python import выполнить_код\n' + содержимое
    
    
    конвертированный_код = конвертировать_код(содержимое)
  
    with open(файл, 'w', encoding='utf-8') as f:
        f.write(конвертированный_код)

путь_к_файлу = 'путь/к/вашему/файлу.py'
добавить_библиотеку(путь_к_файлу)
